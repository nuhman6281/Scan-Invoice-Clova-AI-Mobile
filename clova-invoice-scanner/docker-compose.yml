services:
  # PostgreSQL Database with PostGIS for spatial queries
  postgres:
    image: postgres:15-alpine
    container_name: clova-postgres
    environment:
      POSTGRES_DB: invoice_scanner
      POSTGRES_USER: scanner
      POSTGRES_PASSWORD: password123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - clova_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scanner -d invoice_scanner"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: clova-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - clova_network
    command: redis-server --appendonly yes --ignore-warnings ARM64-COW-BUG
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: clova-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://scanner:password123@postgres:5432/invoice_scanner
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-development-only
      CLOVA_SERVICE_URL: http://localhost:8000
      UPLOAD_DIR: /app/uploads
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080,capacitor://localhost
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      LOG_LEVEL: debug
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clova-service:
        condition: service_started
    networks:
      - clova_network
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python CLOVA AI Service
  clova-service:
    build:
      context: ./clova-service
      dockerfile: Dockerfile
      target: development
    container_name: clova-ai-service
    environment:
      PYTHONPATH: /app
      MODEL_CACHE_DIR: /app/models
      UPLOAD_DIR: /app/uploads
      LOG_LEVEL: DEBUG
      MAX_WORKERS: 2
      HOST: 0.0.0.0
      PORT: 8000
    ports:
      - "8000:8000"
    volumes:
      - ./clova-service:/app
      - ./uploads:/app/uploads
      - model_cache:/app/models
    networks:
      - clova_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload --workers 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Nginx for reverse proxy and static file serving
  nginx:
    image: nginx:alpine
    container_name: clova-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./uploads:/var/www/uploads
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - clova-service
    networks:
      - clova_network

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: clova-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - clova_network

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: clova-redis-commander
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - clova_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  model_cache:
    driver: local

networks:
  clova_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
